{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nrequire('../tools/request-animation-frame');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Words = function (_Component) {\n  _inherits(Words, _Component);\n\n  function Words() {\n    _classCallCheck(this, Words);\n\n    var _this = _possibleConstructorReturn(this, (Words.__proto__ || Object.getPrototypeOf(Words)).apply(this, arguments));\n\n    _this.currentAnimationFrame = null;\n    _this.state = {\n      text: '',\n      animating: false\n    };\n    return _this;\n  } // Current animation frame identifier.\n\n\n  _createClass(Words, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      if (this.props.animate && this.props.show) {\n        this.animateIn();\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      var _props = this.props,\n          animate = _props.animate,\n          show = _props.show,\n          children = _props.children;\n      var animateChanged = animate !== prevProps.animate;\n      var showChanged = show !== prevProps.show;\n      var childrenChanged = children !== prevProps.children; // Animation changed\n\n      if (animate) {\n        if (showChanged) {\n          show ? this.animateIn() : this.animateOut();\n        } else if (childrenChanged) {\n          this.animateIn();\n        }\n      } // Not animated anymore\n\n\n      if (!animate && animateChanged) {\n        this.stopAnimation();\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.stopAnimation();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _cx;\n\n      var _props2 = this.props,\n          theme = _props2.theme,\n          classes = _props2.classes,\n          sounds = _props2.sounds,\n          animate = _props2.animate,\n          show = _props2.show,\n          animation = _props2.animation,\n          layer = _props2.layer,\n          blinkText = _props2.blinkText,\n          className = _props2.className,\n          children = _props2.children,\n          etc = _objectWithoutProperties(_props2, ['theme', 'classes', 'sounds', 'animate', 'show', 'animation', 'layer', 'blinkText', 'className', 'children']);\n\n      var _state = this.state,\n          animating = _state.animating,\n          text = _state.text;\n      var cls = (0, _classnames2.default)(classes.root, (_cx = {}, _defineProperty(_cx, classes.hide, animate && !show && !animating), _defineProperty(_cx, classes.animating, animating), _cx), className);\n      return _react2.default.createElement('span', _extends({\n        className: (0, _classnames2.default)(cls)\n      }, etc), _react2.default.createElement('span', {\n        className: classes.children\n      }, children), animating && _react2.default.createElement('span', {\n        className: classes.text\n      }, text, _react2.default.createElement('span', {\n        className: classes.blink,\n        dangerouslySetInnerHTML: {\n          __html: blinkText\n        }\n      })));\n    }\n  }, {\n    key: 'animateIn',\n    value: function animateIn() {\n      this.cancelNextAnimation();\n      this.startAnimation(true);\n    }\n  }, {\n    key: 'animateOut',\n    value: function animateOut() {\n      this.cancelNextAnimation();\n      this.startAnimation(false);\n    }\n    /**\n     * Stop current animation and sounds.\n     */\n\n  }, {\n    key: 'stopAnimation',\n    value: function stopAnimation() {\n      this.cancelNextAnimation();\n      this.setState({\n        animating: false\n      });\n      var _props3 = this.props,\n          animate = _props3.animate,\n          sounds = _props3.sounds;\n\n      if (animate) {\n        sounds.typing && sounds.typing.stop();\n      }\n    }\n  }, {\n    key: 'cancelNextAnimation',\n    value: function cancelNextAnimation() {\n      window.cancelAnimationFrame(this.currentAnimationFrame);\n    }\n    /**\n     * Start animating the words and playing sounds.\n     * @param  {Boolean} isIn - If entering.\n     */\n\n  }, {\n    key: 'startAnimation',\n    value: function startAnimation(isIn) {\n      var _this2 = this;\n\n      var _props4 = this.props,\n          theme = _props4.theme,\n          children = _props4.children,\n          animate = _props4.animate,\n          sounds = _props4.sounds,\n          animation = _props4.animation;\n\n      if (children.length === 0) {\n        return;\n      }\n\n      if (animate) {\n        sounds.typing && sounds.typing.play();\n      } // 1s / frames per second (FPS)\n      // 60 FPS are the default in requestAnimationFrame\n\n\n      var interval = 1000 / 60; // The time it will take to add/remove a character per frame\n\n      var realDuration = interval * children.length;\n\n      var _ref = animation || {},\n          _ref$timeout = _ref.timeout,\n          timeout = _ref$timeout === undefined ? theme.animTime : _ref$timeout;\n\n      var duration = Math.min(realDuration, timeout);\n      this.cancelNextAnimation();\n      this.setState({\n        animating: true,\n        text: isIn ? '' : children\n      });\n      var length = children.length;\n      var start = performance.now();\n      var progress = null;\n\n      var nextAnimation = function nextAnimation(timestamp) {\n        if (!start) {\n          start = timestamp;\n        }\n\n        progress = Math.max(timestamp - start, 0);\n\n        if (!isIn) {\n          progress = duration - progress;\n        } // partialLength(n) = animationProgressDuration(ms)\n        // textTotalLength(n) = totalDuration(ms)\n\n\n        var newLength = Math.round(progress * length / duration);\n        var text = children.substring(0, newLength);\n\n        _this2.setState({\n          text: text\n        });\n\n        var continueAnimation = isIn ? newLength <= length : newLength > 0;\n\n        if (continueAnimation) {\n          _this2.currentAnimationFrame = window.requestAnimationFrame(nextAnimation);\n        } else {\n          _this2.stopAnimation();\n        }\n      };\n\n      this.currentAnimationFrame = window.requestAnimationFrame(nextAnimation);\n    }\n  }]);\n\n  return Words;\n}(_react.Component);\n\nWords.propTypes = {\n  theme: _propTypes2.default.any.isRequired,\n  classes: _propTypes2.default.any.isRequired,\n  animate: _propTypes2.default.bool,\n  show: _propTypes2.default.bool,\n\n  /**\n   * Animation settings.\n   */\n  animation: _propTypes2.default.shape({\n    /**\n     * Animation duration in ms.\n     */\n    timeout: _propTypes2.default.number\n  }),\n\n  /**\n   * It uses the `typing` player.\n   */\n  sounds: _propTypes2.default.object,\n\n  /**\n   * Can have disabled the layer by providing `''`.\n   */\n  layer: _propTypes2.default.oneOf(['', 'primary', 'secondary', 'header', 'control', 'success', 'alert', 'disabled']),\n\n  /**\n   * The character to print when typing animation.\n   */\n  blinkText: _propTypes2.default.string,\n\n  /**\n   * Plain text to render and animate if enabled.\n   */\n  children: _propTypes2.default.string.isRequired\n};\nWords.defaultProps = {\n  sounds: {},\n  show: true,\n  layer: '',\n  blinkText: '&#9611;',\n  children: ''\n};\nexports.default = Words;","map":null,"metadata":{},"sourceType":"script"}