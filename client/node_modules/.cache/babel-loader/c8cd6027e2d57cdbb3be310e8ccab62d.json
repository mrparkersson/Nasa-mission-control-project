{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _polished = require('polished');\n\nvar cornerLength = function cornerLength(corners) {\n  switch (corners) {\n    case 1:\n      return 8;\n\n    case 2:\n      return 16;\n\n    case 3:\n      return 16;\n\n    case 4:\n      return 24;\n\n    case 5:\n      return 24;\n\n    default:\n      return 32;\n  }\n};\n\nvar cornerWidth = function cornerWidth(corners) {\n  switch (corners) {\n    case 1:\n      return 1;\n\n    case 2:\n      return 1;\n\n    case 3:\n      return 2;\n\n    case 4:\n      return 2;\n\n    case 6:\n      return 3;\n\n    default:\n      return 3;\n  }\n};\n\nvar getColor = function getColor(theme, props, level) {\n  return theme.color[props.disabled ? 'disabled' : props.layer][level];\n};\n\nvar getBg = function getBg(theme, props) {\n  return theme.background[props.disabled ? 'disabled' : props.layer]['level' + props.level];\n};\n\nexports.default = function (theme) {\n  return {\n    root: {\n      display: 'block',\n      position: 'relative',\n      padding: '1px',\n      '&$exiting, &$exited': {\n        '& $borderLeft, & $borderRight': {\n          height: '0%'\n        },\n        '& $borderTop, & $borderBottom': {\n          width: '0%'\n        },\n        '& $corner': {\n          width: 0,\n          height: 0,\n          opacity: 0\n        },\n        '& $box': {\n          backgroundColor: 'transparent'\n        }\n      },\n      '&$hover:hover': {\n        '& $border': {\n          borderColor: function borderColor(props) {\n            return getColor(theme, props, 'base');\n          },\n          boxShadow: function boxShadow(props) {\n            return '0 0 ' + theme.shadowLength + 'px ' + (0, _polished.rgba)(getColor(theme, props, 'base'), theme.alpha);\n          }\n        },\n        '& $corner': {\n          borderColor: function borderColor(props) {\n            return getColor(theme, props, 'light');\n          },\n          boxShadow: function boxShadow(props) {\n            return '0 0 ' + theme.shadowLength + 'px -' + theme.shadowLength / 2 + 'px ' + (0, _polished.rgba)(getColor(theme, props, 'light'), theme.alpha);\n          }\n        }\n      }\n    },\n    box: {\n      zIndex: 3,\n      position: 'relative',\n      overflow: 'hidden',\n      display: 'block',\n      transition: 'background-color ' + theme.animTime + 'ms ease-in',\n      backgroundColor: function backgroundColor(props) {\n        return props.noBackground ? 'transparent' : props.active ? (0, _polished.rgba)((0, _polished.lighten)(theme.accent, getBg(theme, props)), theme.alpha) : (0, _polished.rgba)(getBg(theme, props), theme.alpha);\n      }\n    },\n    children: {\n      display: 'block'\n    },\n    // Borders\n    border: {\n      zIndex: 1,\n      position: 'absolute',\n      borderStyle: 'solid',\n      transition: 'all ' + theme.animTime + 'ms ease-in',\n      borderColor: function borderColor(props) {\n        return getColor(theme, props, 'dark');\n      },\n      boxShadow: function boxShadow(props) {\n        return '0 0 ' + theme.shadowLength + 'px ' + (0, _polished.rgba)(getColor(theme, props, 'dark'), theme.alpha);\n      },\n      opacity: 1\n    },\n    borderLeft: {\n      left: 0,\n      top: '50%',\n      transform: 'translate(0, -50%)',\n      borderWidth: '0 0 0 1px',\n      height: '100%'\n    },\n    borderRight: {\n      right: 0,\n      top: '50%',\n      transform: 'translate(0, -50%)',\n      borderWidth: '0 0 0 1px',\n      height: '100%'\n    },\n    borderTop: {\n      top: 0,\n      left: '50%',\n      transform: 'translate(-50%, 0)',\n      borderWidth: '1px 0 0 0',\n      width: '100%'\n    },\n    borderBottom: {\n      bottom: 0,\n      left: '50%',\n      transform: 'translate(-50%, 0)',\n      borderWidth: '1px 0 0 0',\n      width: '100%'\n    },\n    // Corners\n    corner: {\n      zIndex: 2,\n      position: 'absolute',\n      width: function width(props) {\n        return cornerLength(props.corners);\n      },\n      height: function height(props) {\n        return cornerLength(props.corners);\n      },\n      transition: 'all ' + theme.animTime + 'ms ease-in',\n      borderStyle: 'solid',\n      borderColor: function borderColor(props) {\n        return getColor(theme, props, 'base');\n      },\n      boxShadow: function boxShadow(props) {\n        return '0 0 ' + theme.shadowLength + 'px -' + theme.shadowLength / 2 + 'px ' + (0, _polished.rgba)(getColor(theme, props, 'base'), theme.alpha);\n      },\n      opacity: 1\n    },\n    cornerLT: {\n      left: function left(props) {\n        return -cornerWidth(props.corners);\n      },\n      top: function top(props) {\n        return -cornerWidth(props.corners);\n      },\n      borderWidth: function borderWidth(props) {\n        return cornerWidth(props.corners) + 'px 0 0 ' + cornerWidth(props.corners) + 'px';\n      }\n    },\n    cornerLB: {\n      left: function left(props) {\n        return -cornerWidth(props.corners);\n      },\n      bottom: function bottom(props) {\n        return -cornerWidth(props.corners);\n      },\n      borderWidth: function borderWidth(props) {\n        return '0 0 ' + cornerWidth(props.corners) + 'px ' + cornerWidth(props.corners) + 'px';\n      }\n    },\n    cornerRT: {\n      right: function right(props) {\n        return -cornerWidth(props.corners);\n      },\n      top: function top(props) {\n        return -cornerWidth(props.corners);\n      },\n      borderWidth: function borderWidth(props) {\n        return cornerWidth(props.corners) + 'px ' + cornerWidth(props.corners) + 'px 0 0';\n      }\n    },\n    cornerRB: {\n      right: function right(props) {\n        return -cornerWidth(props.corners);\n      },\n      bottom: function bottom(props) {\n        return -cornerWidth(props.corners);\n      },\n      borderWidth: function borderWidth(props) {\n        return '0 ' + cornerWidth(props.corners) + 'px ' + cornerWidth(props.corners) + 'px 0';\n      }\n    },\n    hover: {},\n    entering: {},\n    entered: {},\n    exiting: {},\n    exited: {}\n  };\n};","map":null,"metadata":{},"sourceType":"script"}