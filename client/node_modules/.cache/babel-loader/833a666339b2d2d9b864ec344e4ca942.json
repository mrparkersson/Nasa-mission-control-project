{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n/**\n * Load a provided image by URL.\n * @param  {String} url\n * @return {Promise}\n */\n\n\nvar loadImage = exports.loadImage = function loadImage(url) {\n  return new Promise(function (resolve, reject) {\n    var img = new Image();\n\n    img.onload = function () {\n      return resolve();\n    };\n\n    img.onerror = img.onabort = function () {\n      return reject();\n    };\n\n    img.src = url;\n  });\n};\n/**\n * Load a provided sound by URL.\n * @param  {String} url\n * @return {Promise}\n */\n\n\nvar loadSound = exports.loadSound = function loadSound(url) {\n  return new Promise(function (resolve, reject) {\n    var sound = new Audio();\n    sound.addEventListener('canplaythrough', function () {\n      return resolve();\n    });\n\n    sound.onerror = sound.onabort = function () {\n      return reject();\n    };\n\n    sound.src = url;\n  });\n};\n/**\n * Create handler for loader functionalities.\n * @param  {Object} depencencies\n * @param  {Function} depencencies.loadImage\n * @param  {Function} depencencies.loadSound\n * @return {Object}\n */\n\n\nexports.default = function (depencencies) {\n  var deps = _extends({\n    loadImage: loadImage,\n    loadSound: loadSound\n  }, depencencies);\n\n  return {\n    /**\n     * Load a list of image and audio resources.\n     * @param  {Object} resources\n     * @param  {String[]} resources.images\n     * @param  {String[]} resources.sounds\n     * @param  {Object} opts - Optional options.\n     * @param  {Number} [opts.timeout=30000] - Maximum duration to load. If this time\n     * is reached and resources are not loaded, the promise is rejected.\n     * @return {Promise}\n     */\n    load: function load(resources, opts) {\n      var _ref = resources || {},\n          _ref$images = _ref.images,\n          images = _ref$images === undefined ? [] : _ref$images,\n          _ref$sounds = _ref.sounds,\n          sounds = _ref$sounds === undefined ? [] : _ref$sounds;\n\n      var options = Object.assign({\n        timeout: 30000\n      }, opts);\n      return new Promise(function (resolve, reject) {\n        setTimeout(reject, options.timeout);\n        Promise.all([].concat(_toConsumableArray(images.map(function (image) {\n          return deps.loadImage(image);\n        })), _toConsumableArray(sounds.map(function (sound) {\n          return deps.loadSound(sound);\n        })))).then(resolve, reject);\n      });\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script"}