{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _detectNode = require('detect-node');\n\nvar _detectNode2 = _interopRequireDefault(_detectNode);\n\nvar _getDimensions = require('../get-dimensions');\n\nvar _getDimensions2 = _interopRequireDefault(_getDimensions);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Create a handler for responsive functionalities.\n * @param  {Object} depencencies - Depencencies.\n * @param  {Function} depencencies.getTheme - Inject the theme settings.\n * @param  {Function} depencencies.getDimensions - Inject the get dimensions tool.\n * @return {Object} - Handler.\n */\n\n\nexports.default = function (depencencies) {\n  var deps = _extends({\n    getTheme: function getTheme() {\n      return {};\n    },\n    getDimensions: _getDimensions2.default\n  }, depencencies);\n\n  return {\n    /**\n     * Get the current responsive stats.\n     * @return {Object} { small: Boolean, medium: Boolean, large: Boolean }\n     */\n    get: function get() {\n      var theme = deps.getTheme();\n\n      var _deps$getDimensions = deps.getDimensions(),\n          width = _deps$getDimensions.width;\n\n      var _theme$responsive = theme.responsive,\n          small = _theme$responsive.small,\n          medium = _theme$responsive.medium,\n          large = _theme$responsive.large;\n\n      if (width <= small) {\n        return {\n          small: true,\n          status: 'small'\n        };\n      } else if (width <= medium) {\n        return {\n          medium: true,\n          status: 'medium'\n        };\n      } else if (width <= large) {\n        return {\n          large: true,\n          status: 'large'\n        };\n      }\n\n      return {\n        xlarge: true,\n        status: 'xlarge'\n      };\n    },\n\n    /**\n     * Register a on resize window callback to know when the current browser viewport\n     * dimentions make the breakpoint change.\n     * @param  {Function} callback - It's called on every change on the breakpoint\n     * and receives and object defining the current viewport size.\n     * @return {Function} The event listener.\n     */\n    on: function on(callback) {\n      var _this = this;\n\n      var current = this.get();\n      var state = current.status;\n\n      var onChange = function onChange() {\n        var stats = _this.get();\n\n        if (stats.status !== state) {\n          callback(stats);\n          state = stats.status;\n        }\n      };\n\n      if (!_detectNode2.default) {\n        window.addEventListener('resize', onChange, false);\n      }\n\n      return onChange;\n    },\n\n    /**\n     * Turns off a window on resize callback previously created.\n     * @param  {Function} - The event callback.\n     */\n    off: function off(onChange) {\n      if (!_detectNode2.default) {\n        window.removeEventListener('resize', onChange, false);\n      }\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script"}