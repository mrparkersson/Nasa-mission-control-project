{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.default = Grid;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction Grid(props) {\n  var _colClasses;\n\n  var theme = props.theme,\n      classes = props.classes,\n      row = props.row,\n      nested = props.nested,\n      noGutter = props.noGutter,\n      noMargin = props.noMargin,\n      col = props.col,\n      s = props.s,\n      m = props.m,\n      l = props.l,\n      xl = props.xl,\n      offset = props.offset,\n      className = props.className,\n      children = props.children,\n      etc = _objectWithoutProperties(props, ['theme', 'classes', 'row', 'nested', 'noGutter', 'noMargin', 'col', 's', 'm', 'l', 'xl', 'offset', 'className', 'children']);\n\n  var isCol = !row && col;\n  var isRowCol = row && col; // Grid is either row or col. If both are provided the row is taken\n  // so the child is a col.\n\n  var baseClass = row ? classes.row : classes.col;\n  var colClasses = (_colClasses = {}, _defineProperty(_colClasses, classes.noGutter, noGutter), _defineProperty(_colClasses, classes['s' + s], s), _defineProperty(_colClasses, classes['m' + m], m), _defineProperty(_colClasses, classes['l' + l], l), _defineProperty(_colClasses, classes['xl' + xl], xl), _colClasses);\n  offset.forEach(function (rule) {\n    colClasses[classes['offset-' + rule]] = true;\n  });\n  var cls = (0, _classnames2.default)(baseClass, noMargin && [classes.noMargin], nested && [classes.nested], isCol && colClasses, className);\n  return _react2.default.createElement('div', _extends({\n    className: cls\n  }, etc), isRowCol ? _react2.default.createElement('div', {\n    className: (0, _classnames2.default)(classes.col, colClasses)\n  }, children) : children);\n}\n\nGrid.propTypes = {\n  theme: _propTypes2.default.any.isRequired,\n  classes: _propTypes2.default.any.isRequired,\n\n  /**\n   * If component is a row.\n   */\n  row: _propTypes2.default.bool,\n\n  /**\n   * If row is nested inside another one.\n   */\n  nested: _propTypes2.default.bool,\n\n  /**\n   * Don't add margin bottom to the row.\n   */\n  noMargin: _propTypes2.default.bool,\n\n  /**\n   * If component is a column.\n   */\n  col: _propTypes2.default.bool,\n\n  /**\n   * Don't add lateral paddings to column.\n   */\n  noGutter: _propTypes2.default.bool,\n\n  /**\n   * The number of columns in small breakpoint.\n   */\n  s: _propTypes2.default.number,\n\n  /**\n   * The number of columns in medium breakpoint.\n   */\n  m: _propTypes2.default.number,\n\n  /**\n   * The number of columns in large breakpoint.\n   */\n  l: _propTypes2.default.number,\n\n  /**\n   * The number of columns in extra large breakpoint.\n   */\n  xl: _propTypes2.default.number,\n\n  /**\n   * A list of offset definitions for each breakpoint.\n   * Example: `['m4', 'l2']` creates an offset of 4 columns\n   * on medium breakpoint and an offset of 2 columns on large breakpoint.\n   */\n  offset: _propTypes2.default.arrayOf(_propTypes2.default.string)\n};\nGrid.defaultProps = {\n  offset: []\n};","map":null,"metadata":{},"sourceType":"script"}